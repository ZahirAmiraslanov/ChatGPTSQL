I am providing now the structure of the tables. Please, don't write any answer yet till I put my question in the next conversatuon:  /****** Object:  Table [Fact].[Sale]    Script Date: 7/7/2023 11:38:33 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [Fact].[Sale](
	[Sale Key] [bigint] IDENTITY(1,1) NOT NULL,
	[City Key] [int] NOT NULL,
	[Customer Key] [int] NOT NULL,
	[Bill To Customer Key] [int] NOT NULL,
	[Stock Item Key] [int] NOT NULL,
	[Invoice Date Key] [date] NOT NULL,
	[Delivery Date Key] [date] NULL,
	[Salesperson Key] [int] NOT NULL,
	[WWI Invoice ID] [int] NOT NULL,
	[Description] [nvarchar](100) NOT NULL,
	[Package] [nvarchar](50) NOT NULL,
	[Quantity] [int] NOT NULL,
	[Unit Price] [decimal](18, 2) NOT NULL,
	[Tax Rate] [decimal](18, 3) NOT NULL,
	[Total Excluding Tax] [decimal](18, 2) NOT NULL,
	[Tax Amount] [decimal](18, 2) NOT NULL,
	[Profit] [decimal](18, 2) NOT NULL,
	[Total Including Tax] [decimal](18, 2) NOT NULL,
	[Total Dry Items] [int] NOT NULL,
	[Total Chiller Items] [int] NOT NULL,
	[Lineage Key] [int] NOT NULL,
 CONSTRAINT [PK_Fact_Sale] PRIMARY KEY CLUSTERED 
(
	[Sale Key] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [Fact].[Sale]  WITH CHECK ADD  CONSTRAINT [FK_Fact_Sale_Bill_To_Customer_Key_Dimension_Customer] FOREIGN KEY([Bill To Customer Key])
REFERENCES [Dimension].[Customer] ([Customer Key])
GO

ALTER TABLE [Fact].[Sale] CHECK CONSTRAINT [FK_Fact_Sale_Bill_To_Customer_Key_Dimension_Customer]
GO

ALTER TABLE [Fact].[Sale]  WITH CHECK ADD  CONSTRAINT [FK_Fact_Sale_City_Key_Dimension_City] FOREIGN KEY([City Key])
REFERENCES [Dimension].[City] ([City Key])
GO

ALTER TABLE [Fact].[Sale] CHECK CONSTRAINT [FK_Fact_Sale_City_Key_Dimension_City]
GO

ALTER TABLE [Fact].[Sale]  WITH CHECK ADD  CONSTRAINT [FK_Fact_Sale_Customer_Key_Dimension_Customer] FOREIGN KEY([Customer Key])
REFERENCES [Dimension].[Customer] ([Customer Key])
GO

ALTER TABLE [Fact].[Sale] CHECK CONSTRAINT [FK_Fact_Sale_Customer_Key_Dimension_Customer]
GO

ALTER TABLE [Fact].[Sale]  WITH CHECK ADD  CONSTRAINT [FK_Fact_Sale_Delivery_Date_Key_Dimension_Date] FOREIGN KEY([Delivery Date Key])
REFERENCES [Dimension].[Date] ([Date])
GO

ALTER TABLE [Fact].[Sale] CHECK CONSTRAINT [FK_Fact_Sale_Delivery_Date_Key_Dimension_Date]
GO

ALTER TABLE [Fact].[Sale]  WITH CHECK ADD  CONSTRAINT [FK_Fact_Sale_Invoice_Date_Key_Dimension_Date] FOREIGN KEY([Invoice Date Key])
REFERENCES [Dimension].[Date] ([Date])
GO

ALTER TABLE [Fact].[Sale] CHECK CONSTRAINT [FK_Fact_Sale_Invoice_Date_Key_Dimension_Date]
GO

ALTER TABLE [Fact].[Sale]  WITH CHECK ADD  CONSTRAINT [FK_Fact_Sale_Salesperson_Key_Dimension_Employee] FOREIGN KEY([Salesperson Key])
REFERENCES [Dimension].[Employee] ([Employee Key])
GO

ALTER TABLE [Fact].[Sale] CHECK CONSTRAINT [FK_Fact_Sale_Salesperson_Key_Dimension_Employee]
GO

ALTER TABLE [Fact].[Sale]  WITH CHECK ADD  CONSTRAINT [FK_Fact_Sale_Stock_Item_Key_Dimension_Stock Item] FOREIGN KEY([Stock Item Key])
REFERENCES [Dimension].[Stock Item] ([Stock Item Key])
GO

ALTER TABLE [Fact].[Sale] CHECK CONSTRAINT [FK_Fact_Sale_Stock_Item_Key_Dimension_Stock Item]
GO

EXEC sys.sp_addextendedproperty @name=N'Description', @value=N'DW key for a row in the Sale fact' , @level0type=N'SCHEMA',@level0name=N'Fact', @level1type=N'TABLE',@level1name=N'Sale', @level2type=N'COLUMN',@level2name=N'Sale Key'
GO

EXEC sys.sp_addextendedproperty @name=N'Description', @value=N'City for this invoice' , @level0type=N'SCHEMA',@level0name=N'Fact', @level1type=N'TABLE',@level1name=N'Sale', @level2type=N'COLUMN',@level2name=N'City Key'
GO

EXEC sys.sp_addextendedproperty @name=N'Description', @value=N'Customer for this invoice' , @level0type=N'SCHEMA',@level0name=N'Fact', @level1type=N'TABLE',@level1name=N'Sale', @level2type=N'COLUMN',@level2name=N'Customer Key'
GO

EXEC sys.sp_addextendedproperty @name=N'Description', @value=N'Bill To Customer for this invoice' , @level0type=N'SCHEMA',@level0name=N'Fact', @level1type=N'TABLE',@level1name=N'Sale', @level2type=N'COLUMN',@level2name=N'Bill To Customer Key'
GO

EXEC sys.sp_addextendedproperty @name=N'Description', @value=N'Stock item for this invoice' , @level0type=N'SCHEMA',@level0name=N'Fact', @level1type=N'TABLE',@level1name=N'Sale', @level2type=N'COLUMN',@level2name=N'Stock Item Key'
GO

EXEC sys.sp_addextendedproperty @name=N'Description', @value=N'Invoice date for this invoice' , @level0type=N'SCHEMA',@level0name=N'Fact', @level1type=N'TABLE',@level1name=N'Sale', @level2type=N'COLUMN',@level2name=N'Invoice Date Key'
GO

EXEC sys.sp_addextendedproperty @name=N'Description', @value=N'Date that these items were delivered' , @level0type=N'SCHEMA',@level0name=N'Fact', @level1type=N'TABLE',@level1name=N'Sale', @level2type=N'COLUMN',@level2name=N'Delivery Date Key'
GO

EXEC sys.sp_addextendedproperty @name=N'Description', @value=N'Salesperson for this invoice' , @level0type=N'SCHEMA',@level0name=N'Fact', @level1type=N'TABLE',@level1name=N'Sale', @level2type=N'COLUMN',@level2name=N'Salesperson Key'
GO

EXEC sys.sp_addextendedproperty @name=N'Description', @value=N'InvoiceID in source system' , @level0type=N'SCHEMA',@level0name=N'Fact', @level1type=N'TABLE',@level1name=N'Sale', @level2type=N'COLUMN',@level2name=N'WWI Invoice ID'
GO

EXEC sys.sp_addextendedproperty @name=N'Description', @value=N'Description of the item supplied (Usually the stock item name but can be overridden)' , @level0type=N'SCHEMA',@level0name=N'Fact', @level1type=N'TABLE',@level1name=N'Sale', @level2type=N'COLUMN',@level2name=N'Description'
GO

EXEC sys.sp_addextendedproperty @name=N'Description', @value=N'Type of package supplied' , @level0type=N'SCHEMA',@level0name=N'Fact', @level1type=N'TABLE',@level1name=N'Sale', @level2type=N'COLUMN',@level2name=N'Package'
GO

EXEC sys.sp_addextendedproperty @name=N'Description', @value=N'Quantity supplied' , @level0type=N'SCHEMA',@level0name=N'Fact', @level1type=N'TABLE',@level1name=N'Sale', @level2type=N'COLUMN',@level2name=N'Quantity'
GO

EXEC sys.sp_addextendedproperty @name=N'Description', @value=N'Unit price charged' , @level0type=N'SCHEMA',@level0name=N'Fact', @level1type=N'TABLE',@level1name=N'Sale', @level2type=N'COLUMN',@level2name=N'Unit Price'
GO

EXEC sys.sp_addextendedproperty @name=N'Description', @value=N'Tax rate applied' , @level0type=N'SCHEMA',@level0name=N'Fact', @level1type=N'TABLE',@level1name=N'Sale', @level2type=N'COLUMN',@level2name=N'Tax Rate'
GO

EXEC sys.sp_addextendedproperty @name=N'Description', @value=N'Total amount excluding tax' , @level0type=N'SCHEMA',@level0name=N'Fact', @level1type=N'TABLE',@level1name=N'Sale', @level2type=N'COLUMN',@level2name=N'Total Excluding Tax'
GO

EXEC sys.sp_addextendedproperty @name=N'Description', @value=N'Total amount of tax' , @level0type=N'SCHEMA',@level0name=N'Fact', @level1type=N'TABLE',@level1name=N'Sale', @level2type=N'COLUMN',@level2name=N'Tax Amount'
GO

EXEC sys.sp_addextendedproperty @name=N'Description', @value=N'Total amount of profit' , @level0type=N'SCHEMA',@level0name=N'Fact', @level1type=N'TABLE',@level1name=N'Sale', @level2type=N'COLUMN',@level2name=N'Profit'
GO

EXEC sys.sp_addextendedproperty @name=N'Description', @value=N'Total amount including tax' , @level0type=N'SCHEMA',@level0name=N'Fact', @level1type=N'TABLE',@level1name=N'Sale', @level2type=N'COLUMN',@level2name=N'Total Including Tax'
GO

EXEC sys.sp_addextendedproperty @name=N'Description', @value=N'Total number of dry items' , @level0type=N'SCHEMA',@level0name=N'Fact', @level1type=N'TABLE',@level1name=N'Sale', @level2type=N'COLUMN',@level2name=N'Total Dry Items'
GO

EXEC sys.sp_addextendedproperty @name=N'Description', @value=N'Total number of chiller items' , @level0type=N'SCHEMA',@level0name=N'Fact', @level1type=N'TABLE',@level1name=N'Sale', @level2type=N'COLUMN',@level2name=N'Total Chiller Items'
GO

EXEC sys.sp_addextendedproperty @name=N'Description', @value=N'Lineage Key for the data load for this row' , @level0type=N'SCHEMA',@level0name=N'Fact', @level1type=N'TABLE',@level1name=N'Sale', @level2type=N'COLUMN',@level2name=N'Lineage Key'
GO

EXEC sys.sp_addextendedproperty @name=N'Description', @value=N'Sale fact table (invoiced sales to customers)' , @level0type=N'SCHEMA',@level0name=N'Fact', @level1type=N'TABLE',@level1name=N'Sale'
GO





CREATE TABLE [Dimension].[Stock Item](
	[Stock Item Key] [int] NOT NULL,
	[WWI Stock Item ID] [int] NOT NULL,
	[Stock Item] [nvarchar](100) NOT NULL,
	[Color] [nvarchar](20) NOT NULL,
	[Selling Package] [nvarchar](50) NOT NULL,
	[Buying Package] [nvarchar](50) NOT NULL,
	[Brand] [nvarchar](50) NOT NULL,
	[Size] [nvarchar](20) NOT NULL,
	[Lead Time Days] [int] NOT NULL,
	[Quantity Per Outer] [int] NOT NULL,
	[Is Chiller Stock] [bit] NOT NULL,
	[Barcode] [nvarchar](50) NULL,
	[Tax Rate] [decimal](18, 3) NOT NULL,
	[Unit Price] [decimal](18, 2) NOT NULL,
	[Recommended Retail Price] [decimal](18, 2) NULL,
	[Typical Weight Per Unit] [decimal](18, 3) NOT NULL,
	[Photo] [varbinary](max) NULL,
	[Valid From] [datetime2](7) NOT NULL,
	[Valid To] [datetime2](7) NOT NULL,
	[Lineage Key] [int] NOT NULL,
 CONSTRAINT [PK_Dimension_Stock_Item] PRIMARY KEY CLUSTERED 
(
	[Stock Item Key] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

ALTER TABLE [Dimension].[Stock Item] ADD  CONSTRAINT [DF_Dimension_Stock_Item_Stock_Item_Key]  DEFAULT (NEXT VALUE FOR [Sequences].[StockItemKey]) FOR [Stock Item Key]
GO

EXEC sys.sp_addextendedproperty @name=N'Description', @value=N'DW key for the stock item dimension' , @level0type=N'SCHEMA',@level0name=N'Dimension', @level1type=N'TABLE',@level1name=N'Stock Item', @level2type=N'COLUMN',@level2name=N'Stock Item Key'
GO

EXEC sys.sp_addextendedproperty @name=N'Description', @value=N'Numeric ID used for reference to a stock item within the WWI database' , @level0type=N'SCHEMA',@level0name=N'Dimension', @level1type=N'TABLE',@level1name=N'Stock Item', @level2type=N'COLUMN',@level2name=N'WWI Stock Item ID'
GO

EXEC sys.sp_addextendedproperty @name=N'Description', @value=N'Full name of a stock item (but not a full description)' , @level0type=N'SCHEMA',@level0name=N'Dimension', @level1type=N'TABLE',@level1name=N'Stock Item', @level2type=N'COLUMN',@level2name=N'Stock Item'
GO

EXEC sys.sp_addextendedproperty @name=N'Description', @value=N'Color (optional) for this stock item' , @level0type=N'SCHEMA',@level0name=N'Dimension', @level1type=N'TABLE',@level1name=N'Stock Item', @level2type=N'COLUMN',@level2name=N'Color'
GO

EXEC sys.sp_addextendedproperty @name=N'Description', @value=N'Usual package for selling units of this stock item' , @level0type=N'SCHEMA',@level0name=N'Dimension', @level1type=N'TABLE',@level1name=N'Stock Item', @level2type=N'COLUMN',@level2name=N'Selling Package'
GO

EXEC sys.sp_addextendedproperty @name=N'Description', @value=N'Usual package for selling outers of this stock item (ie cartons, boxes, etc.)' , @level0type=N'SCHEMA',@level0name=N'Dimension', @level1type=N'TABLE',@level1name=N'Stock Item', @level2type=N'COLUMN',@level2name=N'Buying Package'
GO

EXEC sys.sp_addextendedproperty @name=N'Description', @value=N'Brand for the stock item (if the item is branded)' , @level0type=N'SCHEMA',@level0name=N'Dimension', @level1type=N'TABLE',@level1name=N'Stock Item', @level2type=N'COLUMN',@level2name=N'Brand'
GO

EXEC sys.sp_addextendedproperty @name=N'Description', @value=N'Size of this item (eg: 100mm)' , @level0type=N'SCHEMA',@level0name=N'Dimension', @level1type=N'TABLE',@level1name=N'Stock Item', @level2type=N'COLUMN',@level2name=N'Size'
GO

EXEC sys.sp_addextendedproperty @name=N'Description', @value=N'Number of days typically taken from order to receipt of this stock item' , @level0type=N'SCHEMA',@level0name=N'Dimension', @level1type=N'TABLE',@level1name=N'Stock Item', @level2type=N'COLUMN',@level2name=N'Lead Time Days'
GO

EXEC sys.sp_addextendedproperty @name=N'Description', @value=N'Quantity of the stock item in an outer package' , @level0type=N'SCHEMA',@level0name=N'Dimension', @level1type=N'TABLE',@level1name=N'Stock Item', @level2type=N'COLUMN',@level2name=N'Quantity Per Outer'
GO

EXEC sys.sp_addextendedproperty @name=N'Description', @value=N'Does this stock item need to be in a chiller?' , @level0type=N'SCHEMA',@level0name=N'Dimension', @level1type=N'TABLE',@level1name=N'Stock Item', @level2type=N'COLUMN',@level2name=N'Is Chiller Stock'
GO

EXEC sys.sp_addextendedproperty @name=N'Description', @value=N'Barcode for this stock item' , @level0type=N'SCHEMA',@level0name=N'Dimension', @level1type=N'TABLE',@level1name=N'Stock Item', @level2type=N'COLUMN',@level2name=N'Barcode'
GO

EXEC sys.sp_addextendedproperty @name=N'Description', @value=N'Tax rate to be applied' , @level0type=N'SCHEMA',@level0name=N'Dimension', @level1type=N'TABLE',@level1name=N'Stock Item', @level2type=N'COLUMN',@level2name=N'Tax Rate'
GO

EXEC sys.sp_addextendedproperty @name=N'Description', @value=N'Selling price (ex-tax) for one unit of this product' , @level0type=N'SCHEMA',@level0name=N'Dimension', @level1type=N'TABLE',@level1name=N'Stock Item', @level2type=N'COLUMN',@level2name=N'Unit Price'
GO

EXEC sys.sp_addextendedproperty @name=N'Description', @value=N'Recommended retail price for this stock item' , @level0type=N'SCHEMA',@level0name=N'Dimension', @level1type=N'TABLE',@level1name=N'Stock Item', @level2type=N'COLUMN',@level2name=N'Recommended Retail Price'
GO

EXEC sys.sp_addextendedproperty @name=N'Description', @value=N'Typical weight for one unit of this product (packaged)' , @level0type=N'SCHEMA',@level0name=N'Dimension', @level1type=N'TABLE',@level1name=N'Stock Item', @level2type=N'COLUMN',@level2name=N'Typical Weight Per Unit'
GO

EXEC sys.sp_addextendedproperty @name=N'Description', @value=N'Photo of the product' , @level0type=N'SCHEMA',@level0name=N'Dimension', @level1type=N'TABLE',@level1name=N'Stock Item', @level2type=N'COLUMN',@level2name=N'Photo'
GO

EXEC sys.sp_addextendedproperty @name=N'Description', @value=N'Valid from this date and time' , @level0type=N'SCHEMA',@level0name=N'Dimension', @level1type=N'TABLE',@level1name=N'Stock Item', @level2type=N'COLUMN',@level2name=N'Valid From'
GO

EXEC sys.sp_addextendedproperty @name=N'Description', @value=N'Valid until this date and time' , @level0type=N'SCHEMA',@level0name=N'Dimension', @level1type=N'TABLE',@level1name=N'Stock Item', @level2type=N'COLUMN',@level2name=N'Valid To'
GO

EXEC sys.sp_addextendedproperty @name=N'Description', @value=N'Lineage Key for the data load for this row' , @level0type=N'SCHEMA',@level0name=N'Dimension', @level1type=N'TABLE',@level1name=N'Stock Item', @level2type=N'COLUMN',@level2name=N'Lineage Key'
GO

EXEC sys.sp_addextendedproperty @name=N'Description', @value=N'StockItem dimension' , @level0type=N'SCHEMA',@level0name=N'Dimension', @level1type=N'TABLE',@level1name=N'Stock Item'
GO




CREATE TABLE [Dimension].[Date](
	[Date] [date] NOT NULL,
	[Day Number] [int] NOT NULL,
	[Day] [nvarchar](10) NOT NULL,
	[Month] [nvarchar](10) NOT NULL,
	[Short Month] [nvarchar](3) NOT NULL,
	[Calendar Month Number] [int] NOT NULL,
	[Calendar Month Label] [nvarchar](20) NOT NULL,
	[Calendar Year] [int] NOT NULL,
	[Calendar Year Label] [nvarchar](10) NOT NULL,
	[Fiscal Month Number] [int] NOT NULL,
	[Fiscal Month Label] [nvarchar](20) NOT NULL,
	[Fiscal Year] [int] NOT NULL,
	[Fiscal Year Label] [nvarchar](10) NOT NULL,
	[ISO Week Number] [int] NOT NULL,
 CONSTRAINT [PK_Dimension_Date] PRIMARY KEY CLUSTERED 
(
	[Date] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

EXEC sys.sp_addextendedproperty @name=N'Description', @value=N'DW key for date dimension (actual date is used for key)' , @level0type=N'SCHEMA',@level0name=N'Dimension', @level1type=N'TABLE',@level1name=N'Date', @level2type=N'COLUMN',@level2name=N'Date'
GO

EXEC sys.sp_addextendedproperty @name=N'Description', @value=N'Day of the month' , @level0type=N'SCHEMA',@level0name=N'Dimension', @level1type=N'TABLE',@level1name=N'Date', @level2type=N'COLUMN',@level2name=N'Day Number'
GO

EXEC sys.sp_addextendedproperty @name=N'Description', @value=N'Day name' , @level0type=N'SCHEMA',@level0name=N'Dimension', @level1type=N'TABLE',@level1name=N'Date', @level2type=N'COLUMN',@level2name=N'Day'
GO

EXEC sys.sp_addextendedproperty @name=N'Description', @value=N'Month name (ie September)' , @level0type=N'SCHEMA',@level0name=N'Dimension', @level1type=N'TABLE',@level1name=N'Date', @level2type=N'COLUMN',@level2name=N'Month'
GO

EXEC sys.sp_addextendedproperty @name=N'Description', @value=N'Short month name (ie Sep)' , @level0type=N'SCHEMA',@level0name=N'Dimension', @level1type=N'TABLE',@level1name=N'Date', @level2type=N'COLUMN',@level2name=N'Short Month'
GO

EXEC sys.sp_addextendedproperty @name=N'Description', @value=N'Calendar month number' , @level0type=N'SCHEMA',@level0name=N'Dimension', @level1type=N'TABLE',@level1name=N'Date', @level2type=N'COLUMN',@level2name=N'Calendar Month Number'
GO

EXEC sys.sp_addextendedproperty @name=N'Description', @value=N'Calendar month label (ie CY2015Jun)' , @level0type=N'SCHEMA',@level0name=N'Dimension', @level1type=N'TABLE',@level1name=N'Date', @level2type=N'COLUMN',@level2name=N'Calendar Month Label'
GO

EXEC sys.sp_addextendedproperty @name=N'Description', @value=N'Calendar year (ie 2015)' , @level0type=N'SCHEMA',@level0name=N'Dimension', @level1type=N'TABLE',@level1name=N'Date', @level2type=N'COLUMN',@level2name=N'Calendar Year'
GO

EXEC sys.sp_addextendedproperty @name=N'Description', @value=N'Calendar year label (ie CY2015)' , @level0type=N'SCHEMA',@level0name=N'Dimension', @level1type=N'TABLE',@level1name=N'Date', @level2type=N'COLUMN',@level2name=N'Calendar Year Label'
GO

EXEC sys.sp_addextendedproperty @name=N'Description', @value=N'Fiscal month number' , @level0type=N'SCHEMA',@level0name=N'Dimension', @level1type=N'TABLE',@level1name=N'Date', @level2type=N'COLUMN',@level2name=N'Fiscal Month Number'
GO

EXEC sys.sp_addextendedproperty @name=N'Description', @value=N'Fiscal month label (ie FY2015Feb)' , @level0type=N'SCHEMA',@level0name=N'Dimension', @level1type=N'TABLE',@level1name=N'Date', @level2type=N'COLUMN',@level2name=N'Fiscal Month Label'
GO

EXEC sys.sp_addextendedproperty @name=N'Description', @value=N'Fiscal year (ie 2016)' , @level0type=N'SCHEMA',@level0name=N'Dimension', @level1type=N'TABLE',@level1name=N'Date', @level2type=N'COLUMN',@level2name=N'Fiscal Year'
GO

EXEC sys.sp_addextendedproperty @name=N'Description', @value=N'Fiscal year label (ie FY2015)' , @level0type=N'SCHEMA',@level0name=N'Dimension', @level1type=N'TABLE',@level1name=N'Date', @level2type=N'COLUMN',@level2name=N'Fiscal Year Label'
GO

EXEC sys.sp_addextendedproperty @name=N'Description', @value=N'ISO week number (ie 25)' , @level0type=N'SCHEMA',@level0name=N'Dimension', @level1type=N'TABLE',@level1name=N'Date', @level2type=N'COLUMN',@level2name=N'ISO Week Number'
GO

EXEC sys.sp_addextendedproperty @name=N'Description', @value=N'Date dimension' , @level0type=N'SCHEMA',@level0name=N'Dimension', @level1type=N'TABLE',@level1name=N'Date'
GO


ChatGPT
Understood. Please proceed with your question when you're ready.





User
Write a SQL query to retreive product sales revenue and quantity growth rates, calculated as the percentage change in sales revenue and quantity from the previous quarter and year:  Identify the necessary tables, fields, and relationships required to write SQL query. 

Design SQL query which performs the necessary data transformations and calculations. The query should return a data set which consists of following columns: [ProductName], [GrowthRevenueRate], [GrowthQuantityRate], [CurrentQuarter], [CurrentYear], [PreviousQuarter], [PreviousYear] 
ChatGPT
To design a SQL query that retrieves product sales revenue and quantity growth rates, we need to consider the necessary tables, fields, and relationships. Based on the provided table structure, the relevant tables and fields are:

Tables:

[Fact].[Sale] - Contains sales data, including revenue and quantity information.
[Dimension].[Stock Item] - Provides details about the products, including the product name.
Fields:
From the [Fact].[Sale] table:

[Invoice Date Key] - Date of the sale for filtering and grouping by quarters and years.
[Stock Item Key] - Joins the sale data with the product information.
[Total Excluding Tax] - Sales revenue information.
[Quantity] - Quantity sold.
From the [Dimension].[Stock Item] table:

[Stock Item Key] - Joins the sale data with the product information.
[Stock Item] - Product name.
Relationships:

[Fact].[Sale].[Stock Item Key] relates to [Dimension].[Stock Item].[Stock Item Key] to link the sales data with the product information.
Based on this information, we can design the SQL query as follows:

sql
Copy code
SELECT
    SI.[Stock Item] AS [ProductName],
    (SUM(CASE WHEN Q1.[Date] = CURRENT_QUARTER THEN S.[Total Excluding Tax] ELSE 0 END) / SUM(CASE WHEN Q2.[Date] = PREVIOUS_QUARTER THEN S.[Total Excluding Tax] ELSE 0 END) - 1) * 100 AS [GrowthRevenueRate],
    (SUM(CASE WHEN Q1.[Date] = CURRENT_QUARTER THEN S.[Quantity] ELSE 0 END) / SUM(CASE WHEN Q2.[Date] = PREVIOUS_QUARTER THEN S.[Quantity] ELSE 0 END) - 1) * 100 AS [GrowthQuantityRate],
    CURRENT_QUARTER AS [CurrentQuarter],
    CURRENT_YEAR AS [CurrentYear],
    PREVIOUS_QUARTER AS [PreviousQuarter],
    PREVIOUS_YEAR AS [PreviousYear]
FROM
    [Fact].[Sale] S
    INNER JOIN [Dimension].[Stock Item] SI ON S.[Stock Item Key] = SI.[Stock Item Key]
    CROSS JOIN (SELECT DISTINCT [Date] FROM [Dimension].[Date]) Q1
    CROSS JOIN (SELECT DISTINCT [Date] FROM [Dimension].[Date]) Q2
    CROSS JOIN (SELECT QUARTER(GETDATE()) AS CURRENT_QUARTER, YEAR(GETDATE()) AS CURRENT_YEAR) CQ
    CROSS JOIN (SELECT QUARTER(DATEADD(QUARTER, -1, GETDATE())) AS PREVIOUS_QUARTER, YEAR(DATEADD(QUARTER, -1, GETDATE())) AS PREVIOUS_YEAR) PQ
WHERE
    Q1.[Date] BETWEEN DATEFROMPARTS(CQ.CURRENT_YEAR, (CQ.CURRENT_QUARTER - 1) * 3 + 1, 1) AND DATEFROMPARTS(CQ.CURRENT_YEAR, CQ.CURRENT_QUARTER * 3, 1)
    AND Q2.[Date] BETWEEN DATEFROMPARTS(PQ.PREVIOUS_YEAR, (PQ.PREVIOUS_QUARTER - 1) * 3 + 1, 1) AND DATEFROMPARTS(PQ.PREVIOUS_YEAR, PQ.PREVIOUS_QUARTER * 3, 1)
GROUP BY
    SI.[Stock Item],
    CURRENT_QUARTER,
    CURRENT_YEAR,
    PREVIOUS_QUARTER,
    PREVIOUS_YEAR
This query calculates the growth rates by comparing the sales revenue and quantity for the current quarter and year with the previous quarter and year. The result includes the product name, growth revenue rate, growth quantity rate, current quarter, current year, previous quarter, and previous year.

Note: The query assumes that the current date is used to determine the current quarter and year. Adjust the GETDATE() function if needed based on the specific requirements of your system.

Please make sure to test and validate the query in your specific database environment.





User
the query returns :sg 195, Level 15, State 10, Line 14
'QUARTER' is not a recognized built-in function name.
Msg 195, Level 15, State 10, Line 15
'QUARTER' is not a recognized built-in function name.
ChatGPT
Apologies for the error. It seems that the database you're using does not recognize the QUARTER function. To work around this issue, we can modify the query to calculate the current and previous quarters manually. Here's the updated query:

sql
Copy code
SELECT
    SI.[Stock Item] AS [ProductName],
    (SUM(CASE WHEN Q1.[Date] = CURRENT_QUARTER THEN S.[Total Excluding Tax] ELSE 0 END) / SUM(CASE WHEN Q2.[Date] = PREVIOUS_QUARTER THEN S.[Total Excluding Tax] ELSE 0 END) - 1) * 100 AS [GrowthRevenueRate],
    (SUM(CASE WHEN Q1.[Date] = CURRENT_QUARTER THEN S.[Quantity] ELSE 0 END) / SUM(CASE WHEN Q2.[Date] = PREVIOUS_QUARTER THEN S.[Quantity] ELSE 0 END) - 1) * 100 AS [GrowthQuantityRate],
    CURRENT_QUARTER AS [CurrentQuarter],
    CURRENT_YEAR AS [CurrentYear],
    PREVIOUS_QUARTER AS [PreviousQuarter],
    PREVIOUS_YEAR AS [PreviousYear]
FROM
    [Fact].[Sale] S
    INNER JOIN [Dimension].[Stock Item] SI ON S.[Stock Item Key] = SI.[Stock Item Key]
    CROSS JOIN (SELECT DISTINCT [Date] FROM [Dimension].[Date]) Q1
    CROSS JOIN (SELECT DISTINCT [Date] FROM [Dimension].[Date]) Q2
    CROSS JOIN (SELECT DATEPART(QUARTER, GETDATE()) AS CURRENT_QUARTER, DATEPART(YEAR, GETDATE()) AS CURRENT_YEAR) CQ
    CROSS JOIN (SELECT DATEPART(QUARTER, DATEADD(QUARTER, -1, GETDATE())) AS PREVIOUS_QUARTER, DATEPART(YEAR, DATEADD(QUARTER, -1, GETDATE())) AS PREVIOUS_YEAR) PQ
WHERE
    Q1.[Date] BETWEEN DATEFROMPARTS(CQ.CURRENT_YEAR, (CQ.CURRENT_QUARTER - 1) * 3 + 1, 1) AND DATEFROMPARTS(CQ.CURRENT_YEAR, CQ.CURRENT_QUARTER * 3, 1)
    AND Q2.[Date] BETWEEN DATEFROMPARTS(PQ.PREVIOUS_YEAR, (PQ.PREVIOUS_QUARTER - 1) * 3 + 1, 1) AND DATEFROMPARTS(PQ.PREVIOUS_YEAR, PQ.PREVIOUS_QUARTER * 3, 1)
GROUP BY
    SI.[Stock Item],
    CURRENT_QUARTER,
    CURRENT_YEAR,
    PREVIOUS_QUARTER,
    PREVIOUS_YEAR;
This updated query uses the DATEPART function instead of QUARTER to calculate the current and previous quarters. It should now work properly in your database environment.

Please let me know if you have any further questions or issues.





User
and now receive : Msg 206, Level 16, State 2, Line 1
Operand type clash: date is incompatible with int
ChatGPT
Apologies for the confusion. It seems there was an error in the query related to the data type compatibility. In your database, the [Date] column in the [Dimension].[Date] table is of the date data type, whereas I mistakenly assumed it was an integer.

Here's the updated query that addresses the issue and should work correctly:

sql
Copy code
SELECT
    SI.[Stock Item] AS [ProductName],
    (SUM(CASE WHEN Q1.[Date] >= CURRENT_QUARTER_START AND Q1.[Date] <= CURRENT_QUARTER_END THEN S.[Total Excluding Tax] ELSE 0 END) / SUM(CASE WHEN Q2.[Date] >= PREVIOUS_QUARTER_START AND Q2.[Date] <= PREVIOUS_QUARTER_END THEN S.[Total Excluding Tax] ELSE 0 END) - 1) * 100 AS [GrowthRevenueRate],
    (SUM(CASE WHEN Q1.[Date] >= CURRENT_QUARTER_START AND Q1.[Date] <= CURRENT_QUARTER_END THEN S.[Quantity] ELSE 0 END) / SUM(CASE WHEN Q2.[Date] >= PREVIOUS_QUARTER_START AND Q2.[Date] <= PREVIOUS_QUARTER_END THEN S.[Quantity] ELSE 0 END) - 1) * 100 AS [GrowthQuantityRate],
    CURRENT_QUARTER_START AS [CurrentQuarter],
    CURRENT_YEAR AS [CurrentYear],
    PREVIOUS_QUARTER_START AS [PreviousQuarter],
    PREVIOUS_YEAR AS [PreviousYear]
FROM
    [Fact].[Sale] S
    INNER JOIN [Dimension].[Stock Item] SI ON S.[Stock Item Key] = SI.[Stock Item Key]
    CROSS JOIN [Dimension].[Date] Q1
    CROSS JOIN [Dimension].[Date] Q2
    CROSS JOIN (SELECT DATEFROMPARTS(YEAR(GETDATE()), DATEPART(QUARTER, GETDATE()) * 3 - 2, 1) AS CURRENT_QUARTER_START, YEAR(GETDATE()) AS CURRENT_YEAR) CQ
    CROSS JOIN (SELECT DATEFROMPARTS(YEAR(DATEADD(QUARTER, -1, GETDATE())), (DATEPART(QUARTER, GETDATE()) - 1) * 3 - 2, 1) AS PREVIOUS_QUARTER_START, YEAR(DATEADD(QUARTER, -1, GETDATE())) AS PREVIOUS_YEAR) PQ
WHERE
    Q1.[Date] >= CURRENT_QUARTER_START AND Q1.[Date] <= DATEADD(DAY, -1, DATEADD(QUARTER, 1, CURRENT_QUARTER_START))
    AND Q2.[Date] >= PREVIOUS_QUARTER_START AND Q2.[Date] <= DATEADD(DAY, -1, DATEADD(QUARTER, 1, PREVIOUS_QUARTER_START))
GROUP BY
    SI.[Stock Item],
    CURRENT_QUARTER_START,
    CURRENT_YEAR,
    PREVIOUS_QUARTER_START,
    PREVIOUS_YEAR;
This updated query should resolve the data type compatibility issue and provide the desired results. It calculates the start and end dates of the current and previous quarters using the DATEFROMPARTS and DATEADD functions.

If you encounter any further issues or have additional questions, please let me know.





User
Msg 207, Level 16, State 1, Line 3
Invalid column name 'CURRENT_QUARTER_END'.
Msg 207, Level 16, State 1, Line 3
Invalid column name 'PREVIOUS_QUARTER_END'.
Msg 207, Level 16, State 1, Line 4
Invalid column name 'CURRENT_QUARTER_END'.
Msg 207, Level 16, State 1, Line 4
Invalid column name 'PREVIOUS_QUARTER_END'.
ChatGPT
Apologies once again for the oversight. The error occurred because the columns CURRENT_QUARTER_END and PREVIOUS_QUARTER_END were mistakenly included in the query without being defined. I apologize for the confusion caused.

To rectify the issue, you can use the DATEADD function to calculate the end dates of the current and previous quarters. Here's the updated query with the appropriate modifications:

sql
Copy code
SELECT
    SI.[Stock Item] AS [ProductName],
    (SUM(CASE WHEN Q1.[Date] >= CURRENT_QUARTER_START AND Q1.[Date] <= DATEADD(DAY, -1, DATEADD(QUARTER, 1, CURRENT_QUARTER_START)) THEN S.[Total Excluding Tax] ELSE 0 END) / SUM(CASE WHEN Q2.[Date] >= PREVIOUS_QUARTER_START AND Q2.[Date] <= DATEADD(DAY, -1, DATEADD(QUARTER, 1, PREVIOUS_QUARTER_START)) THEN S.[Total Excluding Tax] ELSE 0 END) - 1) * 100 AS [GrowthRevenueRate],
    (SUM(CASE WHEN Q1.[Date] >= CURRENT_QUARTER_START AND Q1.[Date] <= DATEADD(DAY, -1, DATEADD(QUARTER, 1, CURRENT_QUARTER_START)) THEN S.[Quantity] ELSE 0 END) / SUM(CASE WHEN Q2.[Date] >= PREVIOUS_QUARTER_START AND Q2.[Date] <= DATEADD(DAY, -1, DATEADD(QUARTER, 1, PREVIOUS_QUARTER_START)) THEN S.[Quantity] ELSE 0 END) - 1) * 100 AS [GrowthQuantityRate],
    CURRENT_QUARTER_START AS [CurrentQuarter],
    CURRENT_YEAR AS [CurrentYear],
    PREVIOUS_QUARTER_START AS [PreviousQuarter],
    PREVIOUS_YEAR AS [PreviousYear]
FROM
    [Fact].[Sale] S
    INNER JOIN [Dimension].[Stock Item] SI ON S.[Stock Item Key] = SI.[Stock Item Key]
    CROSS JOIN [Dimension].[Date] Q1
    CROSS JOIN [Dimension].[Date] Q2
    CROSS JOIN (SELECT DATEFROMPARTS(YEAR(GETDATE()), DATEPART(QUARTER, GETDATE()) * 3 - 2, 1) AS CURRENT_QUARTER_START, YEAR(GETDATE()) AS CURRENT_YEAR) CQ
    CROSS JOIN (SELECT DATEFROMPARTS(YEAR(DATEADD(QUARTER, -1, GETDATE())), (DATEPART(QUARTER, GETDATE()) - 1) * 3 - 2, 1) AS PREVIOUS_QUARTER_START, YEAR(DATEADD(QUARTER, -1, GETDATE())) AS PREVIOUS_YEAR) PQ
WHERE
    Q1.[Date] >= CURRENT_QUARTER_START AND Q1.[Date] <= DATEADD(DAY, -1, DATEADD(QUARTER, 1, CURRENT_QUARTER_START))
    AND Q2.[Date] >= PREVIOUS_QUARTER_START AND Q2.[Date] <= DATEADD(DAY, -1, DATEADD(QUARTER, 1, PREVIOUS_QUARTER_START))
GROUP BY
    SI.[Stock Item],
    CURRENT_QUARTER_START,
    CURRENT_YEAR,
    PREVIOUS_QUARTER_START,
    PREVIOUS_YEAR;
Please try running the updated query, and it should now execute without any errors. If you have any further issues or questions, feel free to let me know.





User
redesign the query: it should list  every year and qquarter  and for the previous year's and quarter
ChatGPT
Certainly! Here's a redesigned query that lists the revenue and quantity growth rates for each year and quarter, along with the corresponding previous year and quarter:

sql
Copy code
WITH QuarterlySales AS (
  SELECT
    SI.[Stock Item] AS [ProductName],
    DATEPART(YEAR, S.[Invoice Date]) AS [Year],
    DATEPART(QUARTER, S.[Invoice Date]) AS [Quarter],
    SUM(S.[Total Excluding Tax]) AS [TotalRevenue],
    SUM(S.[Quantity]) AS [TotalQuantity]
  FROM
    [Fact].[Sale] S
    INNER JOIN [Dimension].[Stock Item] SI ON S.[Stock Item Key] = SI.[Stock Item Key]
  GROUP BY
    SI.[Stock Item],
    DATEPART(YEAR, S.[Invoice Date]),
    DATEPART(QUARTER, S.[Invoice Date])
)
SELECT
  Q1.[ProductName],
  Q1.[Year] AS [CurrentYear],
  Q1.[Quarter] AS [CurrentQuarter],
  Q1.[TotalRevenue] AS [CurrentQuarterRevenue],
  Q1.[TotalQuantity] AS [CurrentQuarterQuantity],
  Q2.[Year] AS [PreviousYear],
  Q2.[Quarter] AS [PreviousQuarter],
  Q2.[TotalRevenue] AS [PreviousQuarterRevenue],
  Q2.[TotalQuantity] AS [PreviousQuarterQuantity],
  (Q1.[TotalRevenue] / Q2.[TotalRevenue] - 1) * 100 AS [GrowthRevenueRate],
  (Q1.[TotalQuantity] / Q2.[TotalQuantity] - 1) * 100 AS [GrowthQuantityRate]
FROM
  QuarterlySales Q1
  LEFT JOIN QuarterlySales Q2 ON Q1.[ProductName] = Q2.[ProductName] AND Q1.[Year] = Q2.[Year] + 1 AND Q1.[Quarter] = Q2.[Quarter]
ORDER BY
  Q1.[ProductName],
  Q1.[Year],
  Q1.[Quarter];
This query uses a common table expression (CTE) called QuarterlySales to calculate the total revenue and quantity for each product, year, and quarter. It then joins the CTE with itself to retrieve the corresponding data for the previous year and quarter. The growth rates are calculated by comparing the current quarter's values with the previous quarter's values.

The result set includes the product name, current year, current quarter, current quarter's revenue and quantity, previous year, previous quarter, previous quarter's revenue and quantity, and the growth rates for revenue and quantity.

Please give it a try, and let me know if you have any further questions or concerns!





User
Msg 207, Level 16, State 1, Line 13
Invalid column name 'Invoice Date'.
Msg 207, Level 16, State 1, Line 14
Invalid column name 'Invoice Date'.
Msg 207, Level 16, State 1, Line 4
Invalid column name 'Invoice Date'.
Msg 207, Level 16, State 1, Line 5
Invalid column name 'Invoice Date'.
ChatGPT
Apologies for the oversight. It seems that the column name used in the query for the [Invoice Date] is incorrect. Please replace the occurrences of [Invoice Date] with the correct column name [Invoice Date Key] in the query. Here's the modified query:

sql
Copy code
WITH QuarterlySales AS (
  SELECT
    SI.[Stock Item] AS [ProductName],
    DATEPART(YEAR, S.[Invoice Date Key]) AS [Year],
    DATEPART(QUARTER, S.[Invoice Date Key]) AS [Quarter],
    SUM(S.[Total Excluding Tax]) AS [TotalRevenue],
    SUM(S.[Quantity]) AS [TotalQuantity]
  FROM
    [Fact].[Sale] S
    INNER JOIN [Dimension].[Stock Item] SI ON S.[Stock Item Key] = SI.[Stock Item Key]
  GROUP BY
    SI.[Stock Item],
    DATEPART(YEAR, S.[Invoice Date Key]),
    DATEPART(QUARTER, S.[Invoice Date Key])
)
SELECT
  Q1.[ProductName],
  Q1.[Year] AS [CurrentYear],
  Q1.[Quarter] AS [CurrentQuarter],
  Q1.[TotalRevenue] AS [CurrentQuarterRevenue],
  Q1.[TotalQuantity] AS [CurrentQuarterQuantity],
  Q2.[Year] AS [PreviousYear],
  Q2.[Quarter] AS [PreviousQuarter],
  Q2.[TotalRevenue] AS [PreviousQuarterRevenue],
  Q2.[TotalQuantity] AS [PreviousQuarterQuantity],
  (Q1.[TotalRevenue] / Q2.[TotalRevenue] - 1) * 100 AS [GrowthRevenueRate],
  (Q1.[TotalQuantity] / Q2.[TotalQuantity] - 1) * 100 AS [GrowthQuantityRate]
FROM
  QuarterlySales Q1
  LEFT JOIN QuarterlySales Q2 ON Q1.[ProductName] = Q2.[ProductName] AND Q1.[Year] = Q2.[Year] + 1 AND Q1.[Quarter] = Q2.[Quarter]
ORDER BY
  Q1.[ProductName],
  Q1.[Year],
  Q1.[Quarter];
Please give it a try again, and let me know if you encounter any further issues.





Regenerate response
